{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = 'http://localhost:3000/restaurants';\nexport default {\n  async login(email, password) {\n    try {\n      const response = await axios.get(API_URL);\n      const restaurants = response.data; // Ajustar para usar directamente response.data\n\n      for (const restaurant of restaurants) {\n        // Iterar sobre el array directamente\n        if (restaurant.email === email && restaurant.password === password) {\n          return {\n            success: true,\n            user: restaurant,\n            role: 'admin'\n          };\n        }\n        for (const waiter of restaurant.waiters) {\n          // Acceder a los waiters del restaurante actual\n          if (waiter.email === email && waiter.password === password) {\n            return {\n              success: true,\n              user: restaurant,\n              role: 'waiter',\n              restaurantId: restaurant['business-name']\n            };\n          }\n        }\n      }\n      return {\n        success: false,\n        message: 'Invalid email or password'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'An error occurred while trying to login'\n      };\n    }\n  },\n  async signup(adminData) {\n    try {\n      console.log('sign up data received', adminData);\n\n      //Obtiene los datos del API\n      const response = await axios.get(API_URL);\n      const restaurants = response.data;\n      console.log('Current restaurants:', restaurants);\n\n      //Verifica si el restaurante ya esxiste\n      const existingRestaurant = restaurants.find(r => r.email === adminData.email);\n      if (existingRestaurant) {\n        throw new Error('Restaurant with this email already exists');\n      }\n\n      //Crear nuevo restaurante\n      const newRestaurant = {\n        id: restaurants.length + 1,\n        \"business-name\": adminData.businessName,\n        email: adminData.email,\n        phone: adminData.phone,\n        password: adminData.password,\n        waiters: [],\n        products: []\n      };\n\n      //Guardar los datos actualizados de nuevo en el API\n      await axios.post(API_URL, newRestaurant);\n      return {\n        success: true,\n        message: 'Restaurant registered successfully'\n      };\n    } catch (error) {\n      console.error('Error during signup:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","login","email","password","response","get","restaurants","data","restaurant","success","user","role","waiter","waiters","restaurantId","message","error","signup","adminData","console","log","existingRestaurant","find","r","Error","newRestaurant","id","length","businessName","phone","products","post"],"sources":["E:/kitchen-tech-repo/src/public/services/authService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = 'http://localhost:3000/restaurants';\r\n\r\nexport default {\r\n    async login(email, password) {\r\n        try {\r\n            const response = await axios.get(API_URL);\r\n            const restaurants = response.data; // Ajustar para usar directamente response.data\r\n\r\n\r\n            for (const restaurant of restaurants) { // Iterar sobre el array directamente\r\n                if (restaurant.email === email && restaurant.password === password) {\r\n                    return { success: true, user: restaurant, role: 'admin' };\r\n                }\r\n\r\n                for (const waiter of restaurant.waiters) { // Acceder a los waiters del restaurante actual\r\n                    if (waiter.email === email && waiter.password === password) {\r\n                        return { success: true, user: restaurant, role: 'waiter', restaurantId: restaurant['business-name'] };\r\n                    }\r\n                }\r\n            }\r\n            return { success: false, message: 'Invalid email or password' };\r\n        } catch (error) {\r\n            return { success: false, message: 'An error occurred while trying to login' };\r\n        }\r\n    },\r\n\r\n    async signup(adminData){\r\n        try{\r\n            console.log('sign up data received', adminData);\r\n\r\n            //Obtiene los datos del API\r\n            const response = await axios.get(API_URL);\r\n            const restaurants = response.data;\r\n            console.log('Current restaurants:', restaurants);\r\n\r\n            //Verifica si el restaurante ya esxiste\r\n            const existingRestaurant = restaurants.find(r => r.email === adminData.email);\r\n            if(existingRestaurant) {\r\n                throw new Error('Restaurant with this email already exists');\r\n            }\r\n\r\n            //Crear nuevo restaurante\r\n            const newRestaurant = {\r\n                id: restaurants.length + 1,\r\n                \"business-name\": adminData.businessName,\r\n                email: adminData.email,\r\n                phone: adminData.phone,\r\n                password: adminData.password,\r\n                waiters:[],\r\n                products:[]\r\n            };\r\n\r\n            //Guardar los datos actualizados de nuevo en el API\r\n            await axios.post(API_URL, newRestaurant);\r\n\r\n            return {success: true, message: 'Restaurant registered successfully'};\r\n        } catch (error) {\r\n            console.error('Error during signup:', error);\r\n            return { success: false, message: error.message };\r\n        }\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,mCAAmC;AAEnD,eAAe;EACX,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACzB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,CAAC;MACzC,MAAMM,WAAW,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAGnC,KAAK,MAAMC,UAAU,IAAIF,WAAW,EAAE;QAAE;QACpC,IAAIE,UAAU,CAACN,KAAK,KAAKA,KAAK,IAAIM,UAAU,CAACL,QAAQ,KAAKA,QAAQ,EAAE;UAChE,OAAO;YAAEM,OAAO,EAAE,IAAI;YAAEC,IAAI,EAAEF,UAAU;YAAEG,IAAI,EAAE;UAAQ,CAAC;QAC7D;QAEA,KAAK,MAAMC,MAAM,IAAIJ,UAAU,CAACK,OAAO,EAAE;UAAE;UACvC,IAAID,MAAM,CAACV,KAAK,KAAKA,KAAK,IAAIU,MAAM,CAACT,QAAQ,KAAKA,QAAQ,EAAE;YACxD,OAAO;cAAEM,OAAO,EAAE,IAAI;cAAEC,IAAI,EAAEF,UAAU;cAAEG,IAAI,EAAE,QAAQ;cAAEG,YAAY,EAAEN,UAAU,CAAC,eAAe;YAAE,CAAC;UACzG;QACJ;MACJ;MACA,OAAO;QAAEC,OAAO,EAAE,KAAK;QAAEM,OAAO,EAAE;MAA4B,CAAC;IACnE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,OAAO;QAAEP,OAAO,EAAE,KAAK;QAAEM,OAAO,EAAE;MAA0C,CAAC;IACjF;EACJ,CAAC;EAED,MAAME,MAAMA,CAACC,SAAS,EAAC;IACnB,IAAG;MACCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,SAAS,CAAC;;MAE/C;MACA,MAAMd,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,CAAC;MACzC,MAAMM,WAAW,GAAGF,QAAQ,CAACG,IAAI;MACjCY,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEd,WAAW,CAAC;;MAEhD;MACA,MAAMe,kBAAkB,GAAGf,WAAW,CAACgB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACrB,KAAK,KAAKgB,SAAS,CAAChB,KAAK,CAAC;MAC7E,IAAGmB,kBAAkB,EAAE;QACnB,MAAM,IAAIG,KAAK,CAAC,2CAA2C,CAAC;MAChE;;MAEA;MACA,MAAMC,aAAa,GAAG;QAClBC,EAAE,EAAEpB,WAAW,CAACqB,MAAM,GAAG,CAAC;QAC1B,eAAe,EAAET,SAAS,CAACU,YAAY;QACvC1B,KAAK,EAAEgB,SAAS,CAAChB,KAAK;QACtB2B,KAAK,EAAEX,SAAS,CAACW,KAAK;QACtB1B,QAAQ,EAAEe,SAAS,CAACf,QAAQ;QAC5BU,OAAO,EAAC,EAAE;QACViB,QAAQ,EAAC;MACb,CAAC;;MAED;MACA,MAAM/B,KAAK,CAACgC,IAAI,CAAC/B,OAAO,EAAEyB,aAAa,CAAC;MAExC,OAAO;QAAChB,OAAO,EAAE,IAAI;QAAEM,OAAO,EAAE;MAAoC,CAAC;IACzE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZG,OAAO,CAACH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO;QAAEP,OAAO,EAAE,KAAK;QAAEM,OAAO,EAAEC,KAAK,CAACD;MAAQ,CAAC;IACrD;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}