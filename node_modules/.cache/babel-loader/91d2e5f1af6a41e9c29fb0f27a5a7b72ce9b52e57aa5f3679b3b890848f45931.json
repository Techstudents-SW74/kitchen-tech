{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = 'http://localhost:3000/restaurants';\nexport const productsService = {\n  async getProductsByRestaurant(restaurantName) {\n    try {\n      const response = await axios.get(API_URL);\n      const restaurant = response.data.find(restaurant => restaurant['business-name'] === restaurantName);\n      if (restaurant) {\n        return restaurant.products || []; // Inicializa como arreglo si no existe\n      } else {\n        throw new Error('Restaurant not found');\n      }\n    } catch (error) {\n      console.error(\"Error fetching products: \", error);\n      throw error;\n    }\n  },\n  async addProduct(restaurantName, product) {\n    try {\n      const response = await axios.get(API_URL);\n      const restaurant = response.data.find(r => r['business-name'] === restaurantName);\n      if (restaurant) {\n        const lastProduct = restaurant.products || [];\n\n        // Enviar la actualización al servidor\n        await axios.put(`${API_URL}/${restaurant.id}`, restaurant);\n      }\n    } catch (error) {\n      console.error(\"Error adding product: \", error);\n    }\n  },\n  async updateProduct(restaurantName, product) {\n    try {\n      const response = await axios.get(API_URL);\n      const restaurant = response.data.find(r => r['business-name'] === restaurantName);\n      if (restaurant) {\n        const productIndex = restaurant.products.findIndex(p => p.id === product.id);\n        if (productIndex !== -1) {\n          // Actualizar el producto en la posición correspondiente\n          restaurant.products[productIndex] = product;\n\n          // Enviar la actualización al servidor\n          await axios.put(`${API_URL}/${restaurant.id}`, restaurant);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating product: \", error);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","productsService","getProductsByRestaurant","restaurantName","response","get","restaurant","data","find","products","Error","error","console","addProduct","product","r","lastProduct","put","id","updateProduct","productIndex","findIndex","p"],"sources":["E:/kitchen-tech-repo/src/public/services/productsService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = 'http://localhost:3000/restaurants';\r\n\r\nexport const productsService = {\r\n    async getProductsByRestaurant(restaurantName) {\r\n        try {\r\n            const response = await axios.get(API_URL);\r\n            const restaurant = response.data.find(restaurant => restaurant['business-name'] === restaurantName);\r\n            if (restaurant) {\r\n                return restaurant.products || [];  // Inicializa como arreglo si no existe\r\n            } else {\r\n                throw new Error('Restaurant not found');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching products: \", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async addProduct(restaurantName, product) {\r\n        try {\r\n            const response = await axios.get(API_URL);\r\n            const restaurant = response.data.find(r => r['business-name'] === restaurantName);\r\n\r\n            if (restaurant) {\r\n                const lastProduct = restaurant.products || [];\r\n\r\n                // Enviar la actualización al servidor\r\n                await axios.put(`${API_URL}/${restaurant.id}`, restaurant);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error adding product: \", error);\r\n        }\r\n    },\r\n\r\n    async updateProduct(restaurantName, product) {\r\n        try {\r\n            const response = await axios.get(API_URL);\r\n            const restaurant = response.data.find(r => r['business-name'] === restaurantName);\r\n\r\n            if (restaurant) {\r\n                const productIndex = restaurant.products.findIndex(p => p.id === product.id);\r\n\r\n                if (productIndex !== -1) {\r\n                    // Actualizar el producto en la posición correspondiente\r\n                    restaurant.products[productIndex] = product;\r\n\r\n                    // Enviar la actualización al servidor\r\n                    await axios.put(`${API_URL}/${restaurant.id}`, restaurant);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error updating product: \", error);\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,mCAAmC;AAEnD,OAAO,MAAMC,eAAe,GAAG;EAC3B,MAAMC,uBAAuBA,CAACC,cAAc,EAAE;IAC1C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,CAAC;MACzC,MAAMM,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACF,UAAU,IAAIA,UAAU,CAAC,eAAe,CAAC,KAAKH,cAAc,CAAC;MACnG,IAAIG,UAAU,EAAE;QACZ,OAAOA,UAAU,CAACG,QAAQ,IAAI,EAAE,CAAC,CAAE;MACvC,CAAC,MAAM;QACH,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MAC3C;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,MAAME,UAAUA,CAACV,cAAc,EAAEW,OAAO,EAAE;IACtC,IAAI;MACA,MAAMV,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,CAAC;MACzC,MAAMM,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACO,CAAC,IAAIA,CAAC,CAAC,eAAe,CAAC,KAAKZ,cAAc,CAAC;MAEjF,IAAIG,UAAU,EAAE;QACZ,MAAMU,WAAW,GAAGV,UAAU,CAACG,QAAQ,IAAI,EAAE;;QAE7C;QACA,MAAMV,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,IAAIM,UAAU,CAACY,EAAE,EAAE,EAAEZ,UAAU,CAAC;MAC9D;IACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,MAAMQ,aAAaA,CAAChB,cAAc,EAAEW,OAAO,EAAE;IACzC,IAAI;MACA,MAAMV,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,CAAC;MACzC,MAAMM,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACO,CAAC,IAAIA,CAAC,CAAC,eAAe,CAAC,KAAKZ,cAAc,CAAC;MAEjF,IAAIG,UAAU,EAAE;QACZ,MAAMc,YAAY,GAAGd,UAAU,CAACG,QAAQ,CAACY,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACJ,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;QAE5E,IAAIE,YAAY,KAAK,CAAC,CAAC,EAAE;UACrB;UACAd,UAAU,CAACG,QAAQ,CAACW,YAAY,CAAC,GAAGN,OAAO;;UAE3C;UACA,MAAMf,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,IAAIM,UAAU,CAACY,EAAE,EAAE,EAAEZ,UAAU,CAAC;QAC9D;MACJ;IACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}