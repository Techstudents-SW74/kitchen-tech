{"ast":null,"code":"import axiosInstance from \"@/public/services/axiosConfig\";\nconst API_URL = '/table';\nconst getAuthToken = () => {\n  return localStorage.getItem('token');\n};\nexport const tablesService = {\n  async getTableById(tableId) {\n    const token = getAuthToken();\n    const response = await axiosInstance.get(`${API_URL}/${tableId}`);\n  },\n  async getTablesByRestaurant(restaurantId) {\n    try {\n      const token = getAuthToken();\n      const response = await axiosInstance.get(`${API_URL}/restaurant/${restaurantId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching accounts:', error.response ? error.response.data : error.message);\n      throw error;\n    }\n  },\n  async deleteTable(tableId) {\n    try {\n      const token = getAuthToken();\n      const response = await axiosInstance.delete(`${API_URL}/${tableId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting table:', error.response ? error.response.data : error.message);\n      throw error;\n    }\n  },\n  async addTable(table) {\n    try {\n      const token = getAuthToken();\n      const response = await axiosInstance.post(`${API_URL}`, {\n        tableNumber: table.tableNumber,\n        tableCapacity: table.tableCapacity,\n        tableGuests: table.tableGuests,\n        tableStatus: table.tableStatus,\n        restaurantId: table.restaurantId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return response.data;\n      } else {\n        throw new Error('Error creating table');\n      }\n    } catch (error) {\n      console.error('Error adding table:', error.response ? error.response.data : error.message);\n      throw error;\n    }\n  },\n  async updateTable(table) {\n    try {\n      const token = getAuthToken();\n      const response = await axiosInstance.put(`${API_URL}/${table.id}`, {\n        id: table.id,\n        tableNumber: table.tableNumber,\n        tableCapacity: table.tableCapacity,\n        tableGuests: table.tableGuests,\n        tableStatus: table.tableStatus,\n        restaurantId: table.restaurantId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}` // Incluye el token en el encabezado\n        }\n      });\n      return response.data; // Retorna los datos de la respuesta\n    } catch (error) {\n      console.error('Error updating table:', error.response ? error.response.data : error.message);\n      throw error; // Lanza el error para manejarlo en la llamada\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","API_URL","getAuthToken","localStorage","getItem","tablesService","getTableById","tableId","token","response","get","getTablesByRestaurant","restaurantId","headers","Authorization","data","error","console","message","deleteTable","delete","addTable","table","post","tableNumber","tableCapacity","tableGuests","tableStatus","status","Error","updateTable","put","id"],"sources":["E:/kitchen-tech-repo/src/public/services/tablesService.js"],"sourcesContent":["import axiosInstance from \"@/public/services/axiosConfig\";\r\n\r\nconst API_URL = '/table';\r\n\r\nconst getAuthToken = () => {\r\n    return localStorage.getItem('token');\r\n}\r\n\r\nexport const tablesService = {\r\n    async getTableById(tableId) {\r\n      const token = getAuthToken();\r\n      const response = await axiosInstance.get(`${API_URL}/${tableId}`)\r\n    },\r\n    async getTablesByRestaurant(restaurantId) {\r\n        try {\r\n            const token = getAuthToken();\r\n            const response = await axiosInstance.get(`${API_URL}/restaurant/${restaurantId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching accounts:', error.response ? error.response.data : error.message);\r\n            throw error;\r\n        }\r\n    },\r\n    async deleteTable(tableId) {\r\n        try {\r\n            const token = getAuthToken();\r\n            const response = await axiosInstance.delete(`${API_URL}/${tableId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error deleting table:', error.response ? error.response.data : error.message);\r\n            throw error;\r\n        }\r\n    },\r\n    async addTable(table) {\r\n        try {\r\n            const token = getAuthToken();\r\n            const response = await axiosInstance.post(`${API_URL}`, {\r\n                tableNumber: table.tableNumber,\r\n                tableCapacity: table.tableCapacity,\r\n                tableGuests: table.tableGuests,\r\n                tableStatus: table.tableStatus,\r\n                restaurantId: table.restaurantId,\r\n            },{\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                return response.data;\r\n            } else {\r\n                throw new Error('Error creating table');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error adding table:', error.response ? error.response.data : error.message);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async updateTable(table) {\r\n        try {\r\n            const token = getAuthToken();\r\n            const response = await axiosInstance.put(`${API_URL}/${table.id}`, {\r\n                id: table.id,\r\n                tableNumber: table.tableNumber,\r\n                tableCapacity: table.tableCapacity,\r\n                tableGuests: table.tableGuests,\r\n                tableStatus: table.tableStatus,\r\n                restaurantId: table.restaurantId,\r\n            }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}` // Incluye el token en el encabezado\r\n                }\r\n            });\r\n            return response.data; // Retorna los datos de la respuesta\r\n        } catch (error) {\r\n            console.error('Error updating table:', error.response ? error.response.data : error.message);\r\n            throw error; // Lanza el error para manejarlo en la llamada\r\n        }\r\n    },\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}