{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport authService from \"@/public/services/authService\";\nexport default {\n  data() {\n    return {\n      email: '',\n      emailTouched: false,\n      password: '',\n      passwordTouched: false,\n      loginError: null\n    };\n  },\n  computed: {\n    isValidEmail() {\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailPattern.test(this.email);\n    }\n  },\n  methods: {\n    async onSubmit() {\n      this.emailTouched = true;\n      this.passwordTouched = true;\n      if (this.email && this.isValidEmail && this.password.length >= 6) {\n        try {\n          const response = await authService.login(this.email, this.password);\n          if (response.success) {\n            const restaurantName = response.role === 'admin' ? response.user['business-name'] : response.restaurantId;\n            const basePath = `/${restaurantName}/${response.role}`;\n            localStorage.setItem('userData', JSON.stringify({\n              'business-name': restaurantName,\n              role: response.role\n            }));\n            this.$router.push(`${basePath}/casing`);\n          } else {\n            this.loginError = response.message;\n          }\n        } catch (error) {\n          this.loginError = 'An error ocurred. Please try again';\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["authService","data","email","emailTouched","password","passwordTouched","loginError","computed","isValidEmail","emailPattern","test","methods","onSubmit","length","response","login","success","restaurantName","role","user","restaurantId","basePath","localStorage","setItem","JSON","stringify","$router","push","message","error"],"sources":["E:\\kitchen-tech-repo\\src\\public\\views\\login-page.vue"],"sourcesContent":["<template>\r\n  <div class=\"card-container\">\r\n    <div class=\"card\">\r\n      <div class=\"card-header\">\r\n        <img class=\"logo\" src=\"../../../public/assets/images/logo.png\" alt=\"brand-logo\"/>\r\n        <p class=\"card-title\">Sign In</p>\r\n      </div>\r\n\r\n      <!-- Formulario para el email -->\r\n      <form @submit.prevent=\"onSubmit\">\r\n        <!-- Input para el email -->\r\n        <div class=\"form-field\">\r\n          <label for=\"email\">Email</label>\r\n          <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              v-model=\"email\"\r\n              placeholder=\"Ex. fcastro@gmail.com\"\r\n          />\r\n          <span v-if=\"!email && emailTouched\">Please enter your email</span>\r\n          <span v-if=\"email && !isValidEmail\">Please enter a valid email address</span>\r\n        </div>\r\n\r\n        <!-- Input para la contraseÃ±a -->\r\n        <div class=\"form-field\">\r\n          <label for=\"password\">Password</label>\r\n          <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              v-model=\"password\"\r\n              placeholder=\"Enter your password\"\r\n          />\r\n          <span v-if=\"!password && passwordTouched\">Please enter a password</span>\r\n          <span v-if=\"password.length > 0 && password.length < 6\">Your password must have at least 6 characters</span>\r\n        </div>\r\n\r\n        <button class=\"login-button\" type=\"submit\">Sign In</button>\r\n        <div class=\"signup-redirect\">\r\n          <router-link to=\"/signup\">Don't have an account? Sign up</router-link>\r\n        </div>\r\n        <p v-if=\"loginError\" class=\"error-message\">{{ loginError }}</p>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport authService from \"@/public/services/authService\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      email: '',\r\n      emailTouched: false,\r\n      password: '',\r\n      passwordTouched: false,\r\n      loginError: null\r\n    };\r\n  },\r\n  computed: {\r\n    isValidEmail() {\r\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      return emailPattern.test(this.email);\r\n    }\r\n  },\r\n  methods: {\r\n    async onSubmit() {\r\n      this.emailTouched = true;\r\n      this.passwordTouched = true;\r\n\r\n      if (this.email && this.isValidEmail && this.password.length >= 6) {\r\n        try {\r\n          const response = await authService.login(this.email, this.password);\r\n\r\n          if(response.success) {\r\n            const restaurantName = response.role === 'admin'\r\n                ? response.user['business-name']\r\n                : response.restaurantId;\r\n\r\n            const basePath = `/${restaurantName}/${response.role}`;\r\n            localStorage.setItem('userData', JSON.stringify({ 'business-name': restaurantName, role: response.role }));\r\n            this.$router.push(`${basePath}/casing`);\r\n          } else {\r\n            this.loginError = response.message;\r\n          }\r\n        }catch (error) {\r\n          this.loginError = 'An error ocurred. Please try again';\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.card-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #F6F5FA;\r\n  font-family: 'Red-hat-display', sans-serif;\r\n}\r\n.card {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background-color: #D3D2E5;\r\n  color: #F6F5FA;\r\n  padding: 50px 80px;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  padding-bottom: 30px;\r\n}\r\n.logo{\r\n  width: 150px;\r\n}\r\n.card-title {\r\n  margin: 0;\r\n  font-size: 2.4rem;\r\n  font-weight: 800;\r\n  color: #31304A;\r\n}\r\n\r\n.form-field {\r\n  width: 100%;\r\n  margin-bottom: 20px;\r\n}\r\n.form-field label {\r\n  font-weight: 700;\r\n  color: #31304A;\r\n}\r\n.form-field input {\r\n  width: 100%;\r\n  padding: 12px;\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: #31304A;\r\n  margin: 10px 0;\r\n  font-weight: 500;\r\n  box-sizing: border-box;\r\n}\r\n.form-field span {\r\n  color: #b14343;\r\n  font-size: 0.8rem;\r\n  margin-left: 5px;\r\n}\r\n\r\n.login-button {\r\n  width: 100%;\r\n  margin: 0 0 16px 0;\r\n  color: #F6F5FA;\r\n  padding: 16px;\r\n  background: #31304A;\r\n  font-weight: 500;\r\n  font-size: 1rem;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  box-sizing: border-box;\r\n}\r\n.signup-redirect {\r\n  text-align: right;\r\n  margin-right: 5px;\r\n}\r\n.signup-redirect a {\r\n  color: #31304A;\r\n}\r\n.error-message{\r\n  color: #b14343;\r\n  font-size: 0.8rem;\r\n  margin-left: 5px;\r\n}\r\n</style>\r\n"],"mappings":";AA+CA,OAAOA,WAAU,MAAO,+BAA+B;AAEvD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,KAAK;MACtBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,MAAMC,YAAW,GAAI,4BAA4B;MACjD,OAAOA,YAAY,CAACC,IAAI,CAAC,IAAI,CAACR,KAAK,CAAC;IACtC;EACF,CAAC;EACDS,OAAO,EAAE;IACP,MAAMC,QAAQA,CAAA,EAAG;MACf,IAAI,CAACT,YAAW,GAAI,IAAI;MACxB,IAAI,CAACE,eAAc,GAAI,IAAI;MAE3B,IAAI,IAAI,CAACH,KAAI,IAAK,IAAI,CAACM,YAAW,IAAK,IAAI,CAACJ,QAAQ,CAACS,MAAK,IAAK,CAAC,EAAE;QAChE,IAAI;UACF,MAAMC,QAAO,GAAI,MAAMd,WAAW,CAACe,KAAK,CAAC,IAAI,CAACb,KAAK,EAAE,IAAI,CAACE,QAAQ,CAAC;UAEnE,IAAGU,QAAQ,CAACE,OAAO,EAAE;YACnB,MAAMC,cAAa,GAAIH,QAAQ,CAACI,IAAG,KAAM,OAAM,GACzCJ,QAAQ,CAACK,IAAI,CAAC,eAAe,IAC7BL,QAAQ,CAACM,YAAY;YAE3B,MAAMC,QAAO,GAAI,IAAIJ,cAAc,IAAIH,QAAQ,CAACI,IAAI,EAAE;YACtDI,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAE,eAAe,EAAER,cAAc;cAAEC,IAAI,EAAEJ,QAAQ,CAACI;YAAK,CAAC,CAAC,CAAC;YAC1G,IAAI,CAACQ,OAAO,CAACC,IAAI,CAAC,GAAGN,QAAQ,SAAS,CAAC;UACzC,OAAO;YACL,IAAI,CAACf,UAAS,GAAIQ,QAAQ,CAACc,OAAO;UACpC;QACF,CAAC,QAAOC,KAAK,EAAE;UACb,IAAI,CAACvB,UAAS,GAAI,oCAAoC;QACxD;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}